
// DISCLAIMER THIS CODE HAS BEEN GENERATED BY CHATGPT AS A TEMPLATE. DO NOT EVALUATE

// Instrument.java
abstract class Instrument {
    protected String name;
    protected double price;

    public Instrument(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public abstract void play();
}

// WindInstrument.java
class WindInstrument extends Instrument {
    public WindInstrument(String name, double price) {
        super(name, price);
    }

    @Override
    public void play() {
        System.out.println("A wind instrument is playing");
    }
}

// StringInstrument.java
class StringInstrument extends Instrument {
    public StringInstrument(String name, double price) {
        super(name, price);
    }

    @Override
    public void play() {
        System.out.println("A string instrument is playing");
    }
}

// PercussionInstrument.java
class PercussionInstrument extends Instrument {
    public PercussionInstrument(String name, double price) {
        super(name, price);
    }

    @Override
    public void play() {
        System.out.println("A percussion instrument is playing");
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        // Demonstrate class loading
        System.out.println("Class loading demonstration:");

        // Loading triggered by creating the first instance
        WindInstrument windInstrument = new WindInstrument("Flute", 100.0);
        StringInstrument stringInstrument = new StringInstrument("Violin", 200.0);
        PercussionInstrument percussionInstrument = new PercussionInstrument("Drum", 150.0);

        // Loading triggered by accessing a static member
        System.out.println(Instrument.class.getName());

        // Test instrument play method
        System.out.println("\nTesting instrument play method:");
        windInstrument.play();
        stringInstrument.play();
        percussionInstrument.play();
    }
}
